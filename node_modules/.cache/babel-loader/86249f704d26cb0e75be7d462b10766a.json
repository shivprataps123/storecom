{"ast":null,"code":"import _toConsumableArray from \"D:/Mystore/MyStore/storecom/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"D:/Mystore/MyStore/storecom/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"D:/Mystore/MyStore/storecom/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"willChange\"];\nimport sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\n\nvar visualElement = function visualElement(_ref) {\n  var _ref$treeType = _ref.treeType,\n      treeType = _ref$treeType === void 0 ? \"\" : _ref$treeType,\n      build = _ref.build,\n      _getBaseTarget = _ref.getBaseTarget,\n      _makeTargetAnimatable = _ref.makeTargetAnimatable,\n      _measureViewportBox = _ref.measureViewportBox,\n      renderInstance = _ref.render,\n      readValueFromInstance = _ref.readValueFromInstance,\n      removeValueFromRenderState = _ref.removeValueFromRenderState,\n      _sortNodePosition = _ref.sortNodePosition,\n      scrapeMotionValuesFromProps = _ref.scrapeMotionValuesFromProps;\n  return function (_ref2) {\n    var parent = _ref2.parent,\n        props = _ref2.props,\n        presenceId = _ref2.presenceId,\n        blockInitialAnimation = _ref2.blockInitialAnimation,\n        visualState = _ref2.visualState,\n        reducedMotionConfig = _ref2.reducedMotionConfig;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var isMounted = false;\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n    var instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n\n    var lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    var values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    var valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    var prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    var baseTarget = _objectSpread({}, latestValues);\n    /**\n     * Create an object of the values we initially animated from (if initial prop present).\n     */\n\n\n    var initialValues = props.initial ? _objectSpread({}, latestValues) : {}; // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n    var removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    var _scrapeMotionValuesFr = scrapeMotionValuesFromProps(props),\n        willChange = _scrapeMotionValuesFr.willChange,\n        initialMotionValues = _objectWithoutProperties(_scrapeMotionValuesFr, _excluded);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Update external values with initial values\n     */\n\n\n    if (props.values) {\n      for (var _key in props.values) {\n        var _value = props.values[_key];\n\n        if (latestValues[_key] !== undefined && isMotionValue(_value)) {\n          _value.set(latestValues[_key]);\n        }\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    var isControllingVariants$1 = isControllingVariants(props);\n    var isVariantNode$1 = isVariantNode(props);\n\n    var element = _objectSpread(_objectSpread({\n      treeType: treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent: parent,\n      children: new Set(),\n\n      /**\n       *\n       */\n      presenceId: presenceId,\n      shouldReduceMotion: null,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode$1 ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation: blockInitialAnimation,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: function isMounted() {\n        return Boolean(instance);\n      },\n      mount: function mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n\n        if (isVariantNode$1 && parent && !isControllingVariants$1) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n\n        values.forEach(function (value, key) {\n          return bindToMotionValue(key, value);\n        });\n\n        if (!hasReducedMotionListener.current) {\n          initPrefersReducedMotion();\n        }\n\n        element.shouldReduceMotion = reducedMotionConfig === \"never\" ? false : reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n\n      /**\n       *\n       */\n      unmount: function unmount() {\n        var _a;\n\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(function (remove) {\n          return remove();\n        });\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n      loadFeatures: function loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        var features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n          invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n\n        for (var i = 0; i < numFeatures; i++) {\n          var name = featureNames[i];\n          var _featureDefinitions$n = featureDefinitions[name],\n              isEnabled = _featureDefinitions$n.isEnabled,\n              Component = _featureDefinitions$n.Component;\n          /**\n           * It might be possible in the future to use this moment to\n           * dynamically request functionality. In initial tests this\n           * was producing a lot of duplication amongst bundles.\n           */\n\n          if (isEnabled(renderedProps) && Component) {\n            features.push(createElement(Component, _objectSpread(_objectSpread({\n              key: name\n            }, renderedProps), {}, {\n              visualElement: element\n            })));\n          }\n        }\n\n        if (!element.projection && ProjectionNodeConstructor) {\n          element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n          var layoutId = renderedProps.layoutId,\n              layout = renderedProps.layout,\n              drag = renderedProps.drag,\n              dragConstraints = renderedProps.dragConstraints,\n              layoutScroll = renderedProps.layoutScroll;\n          element.projection.setOptions({\n            layoutId: layoutId,\n            layout: layout,\n            alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n            visualElement: element,\n            scheduleRender: function scheduleRender() {\n              return element.scheduleRender();\n            },\n\n            /**\n             * TODO: Update options in an effect. This could be tricky as it'll be too late\n             * to update by the time layout animations run.\n             * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n             * ensuring it gets called if there's no potential layout animations.\n             *\n             */\n            animationType: typeof layout === \"string\" ? layout : \"both\",\n            initialPromotionConfig: initialLayoutGroupConfig,\n            layoutScroll: layoutScroll\n          });\n        }\n\n        return features;\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild: function addVariantChild(child) {\n        var _a;\n\n        var closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!_sortNodePosition || treeType !== other.treeType) return 0;\n        return _sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: function getClosestVariantNode() {\n        return isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: function getLayoutId() {\n        return props.layoutId;\n      },\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: function getInstance() {\n        return instance;\n      },\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: function getStaticValue(key) {\n        return latestValues[key];\n      },\n      setStaticValue: function setStaticValue(key, value) {\n        return latestValues[key] = value;\n      },\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: function getLatestValues() {\n        return latestValues;\n      },\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility: function setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable: function makeTargetAnimatable(target) {\n        var canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return _makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox: function measureViewportBox() {\n        return _measureViewportBox(instance, props);\n      },\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue: function addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue: function removeValue(key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: function hasValue(key) {\n        return values.has(key);\n      },\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue: function getValue(key, defaultValue) {\n        if (props.values && props.values[key]) {\n          return props.values[key];\n        }\n\n        var value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: function forEachValue(callback) {\n        return values.forEach(callback);\n      },\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: function readValue(key) {\n        return latestValues[key] !== undefined ? latestValues[key] : readValueFromInstance(instance, key, options);\n      },\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget: function setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget: function getBaseTarget(key) {\n        var _a;\n\n        var _props = props,\n            initial = _props.initial;\n        var valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n\n        if (initial && valueFromInitial !== undefined) {\n          return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n\n\n        if (_getBaseTarget) {\n          var target = _getBaseTarget(props, key);\n\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n\n\n        return initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : baseTarget[key];\n      }\n    }, lifecycles), {}, {\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build: function build() {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender: function scheduleRender() {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps: function setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function getProps() {\n        return props;\n      },\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: function getVariant(name) {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: function getDefaultTransition() {\n        return props.transition;\n      },\n      getTransformPagePoint: function getTransformPagePoint() {\n        return props.transformPagePoint;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext: function getVariantContext() {\n        var startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants$1) {\n          var _context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            _context.initial = props.initial;\n          }\n\n          return _context;\n        }\n\n        var context = {};\n\n        for (var i = 0; i < numVariantProps; i++) {\n          var name = variantProps[i];\n          var prop = props[name];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n\n        return context;\n      }\n    });\n\n    return element;\n  };\n};\n\nvar variantProps = [\"initial\"].concat(_toConsumableArray(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["sync","cancelSync","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","isVariantLabel","createLifecycles","updateMotionValuesFromProps","isControllingVariants","isVariantNode","env","invariant","featureDefinitions","createElement","isRefObject","resolveVariantFromProps","featureNames","Object","keys","numFeatures","length","visualElement","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","parent","props","presenceId","blockInitialAnimation","visualState","reducedMotionConfig","options","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","initialValues","initial","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","willChange","initialMotionValues","undefined","add","isControllingVariants$1","isVariantNode$1","current","depth","children","Set","shouldReduceMotion","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","_a","remove","delete","clearAllListeners","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","getLatestValues","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","getStaticValue","setStaticValue","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","valueFromInitial","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","numVariantProps","variantProps","prop"],"sources":["D:/Mystore/MyStore/storecom/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, reducedMotionConfig, }, options = {}) => {\n    let isMounted = false;\n    const { latestValues, renderState } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = {\n        ...latestValues,\n    };\n    /**\n     * Create an object of the values we initially animated from (if initial prop present).\n     */\n    const initialValues = props.initial ? { ...latestValues } : {};\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n        if (!instance || !isMounted)\n            return;\n        triggerBuild();\n        renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n        build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n        lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            latestValues[key] = latestValue;\n            props.onUpdate && sync.update(update, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n        valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const { willChange, ...initialMotionValues } = scrapeMotionValuesFromProps(props);\n    for (const key in initialMotionValues) {\n        const value = initialMotionValues[key];\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n            value.set(latestValues[key], false);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n        }\n    }\n    /**\n     * Update external values with initial values\n     */\n    if (props.values) {\n        for (const key in props.values) {\n            const value = props.values[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key]);\n            }\n        }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n        treeType,\n        /**\n         * This is a mirror of the internal instance prop, which keeps\n         * VisualElement type-compatible with React's RefObject.\n         */\n        current: null,\n        /**\n         * The depth of this visual element within the visual element tree.\n         */\n        depth: parent ? parent.depth + 1 : 0,\n        parent,\n        children: new Set(),\n        /**\n         *\n         */\n        presenceId,\n        shouldReduceMotion: null,\n        /**\n         * If this component is part of the variant tree, it should track\n         * any children that are also part of the tree. This is essentially\n         * a shadow tree to simplify logic around how to stagger over children.\n         */\n        variantChildren: isVariantNode$1 ? new Set() : undefined,\n        /**\n         * Whether this instance is visible. This can be changed imperatively\n         * by the projection tree, is analogous to CSS's visibility in that\n         * hidden elements should take up layout, and needs enacting by the configured\n         * render function.\n         */\n        isVisible: undefined,\n        /**\n         * Normally, if a component is controlled by a parent's variants, it can\n         * rely on that ancestor to trigger animations further down the tree.\n         * However, if a component is created after its parent is mounted, the parent\n         * won't trigger that mount animation so the child needs to.\n         *\n         * TODO: This might be better replaced with a method isParentMounted\n         */\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n        /**\n         * This can be set by AnimatePresence to force components that mount\n         * at the same time as it to mount as if they have initial={false} set.\n         */\n        blockInitialAnimation,\n        /**\n         * Determine whether this component has mounted yet. This is mostly used\n         * by variant children to determine whether they need to trigger their\n         * own animations on mount.\n         */\n        isMounted: () => Boolean(instance),\n        mount(newInstance) {\n            isMounted = true;\n            instance = element.current = newInstance;\n            if (element.projection) {\n                element.projection.mount(newInstance);\n            }\n            if (isVariantNode$1 && parent && !isControllingVariants$1) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            values.forEach((value, key) => bindToMotionValue(key, value));\n            if (!hasReducedMotionListener.current) {\n                initPrefersReducedMotion();\n            }\n            element.shouldReduceMotion =\n                reducedMotionConfig === \"never\"\n                    ? false\n                    : reducedMotionConfig === \"always\"\n                        ? true\n                        : prefersReducedMotion.current;\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            element.setProps(props);\n        },\n        /**\n         *\n         */\n        unmount() {\n            var _a;\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n            cancelSync.update(update);\n            cancelSync.render(render);\n            valueSubscriptions.forEach((remove) => remove());\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n            lifecycles.clearAllListeners();\n            instance = undefined;\n            isMounted = false;\n        },\n        loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n            const features = [];\n            /**\n             * If we're in development mode, check to make sure we're not rendering a motion component\n             * as a child of LazyMotion, as this will break the file-size benefits of using it.\n             */\n            if (env !== \"production\" && preloadedFeatures && isStrict) {\n                invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n            }\n            for (let i = 0; i < numFeatures; i++) {\n                const name = featureNames[i];\n                const { isEnabled, Component } = featureDefinitions[name];\n                /**\n                 * It might be possible in the future to use this moment to\n                 * dynamically request functionality. In initial tests this\n                 * was producing a lot of duplication amongst bundles.\n                 */\n                if (isEnabled(renderedProps) && Component) {\n                    features.push(createElement(Component, {\n                        key: name,\n                        ...renderedProps,\n                        visualElement: element,\n                    }));\n                }\n            }\n            if (!element.projection && ProjectionNodeConstructor) {\n                element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n                const { layoutId, layout, drag, dragConstraints, layoutScroll, } = renderedProps;\n                element.projection.setOptions({\n                    layoutId,\n                    layout,\n                    alwaysMeasureLayout: Boolean(drag) ||\n                        (dragConstraints && isRefObject(dragConstraints)),\n                    visualElement: element,\n                    scheduleRender: () => element.scheduleRender(),\n                    /**\n                     * TODO: Update options in an effect. This could be tricky as it'll be too late\n                     * to update by the time layout animations run.\n                     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                     * ensuring it gets called if there's no potential layout animations.\n                     *\n                     */\n                    animationType: typeof layout === \"string\" ? layout : \"both\",\n                    initialPromotionConfig: initialLayoutGroupConfig,\n                    layoutScroll,\n                });\n            }\n            return features;\n        },\n        /**\n         * Add a child visual element to our set of children.\n         */\n        addVariantChild(child) {\n            var _a;\n            const closestVariantNode = element.getClosestVariantNode();\n            if (closestVariantNode) {\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                return () => closestVariantNode.variantChildren.delete(child);\n            }\n        },\n        sortNodePosition(other) {\n            /**\n             * If these nodes aren't even of the same type we can't compare their depth.\n             */\n            if (!sortNodePosition || treeType !== other.treeType)\n                return 0;\n            return sortNodePosition(element.getInstance(), other.getInstance());\n        },\n        /**\n         * Returns the closest variant node in the tree starting from\n         * this visual element.\n         */\n        getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n        /**\n         * Expose the latest layoutId prop.\n         */\n        getLayoutId: () => props.layoutId,\n        /**\n         * Returns the current instance.\n         */\n        getInstance: () => instance,\n        /**\n         * Get/set the latest static values.\n         */\n        getStaticValue: (key) => latestValues[key],\n        setStaticValue: (key, value) => (latestValues[key] = value),\n        /**\n         * Returns the latest motion value state. Currently only used to take\n         * a snapshot of the visual element - perhaps this can return the whole\n         * visual state\n         */\n        getLatestValues: () => latestValues,\n        /**\n         * Set the visiblity of the visual element. If it's changed, schedule\n         * a render to reflect these changes.\n         */\n        setVisibility(visibility) {\n            if (element.isVisible === visibility)\n                return;\n            element.isVisible = visibility;\n            element.scheduleRender();\n        },\n        /**\n         * Make a target animatable by Popmotion. For instance, if we're\n         * trying to animate width from 100px to 100vw we need to measure 100vw\n         * in pixels to determine what we really need to animate to. This is also\n         * pluggable to support Framer's custom value types like Color,\n         * and CSS variables.\n         */\n        makeTargetAnimatable(target, canMutate = true) {\n            return makeTargetAnimatable(element, target, props, canMutate);\n        },\n        /**\n         * Measure the current viewport box with or without transforms.\n         * Only measures axis-aligned boxes, rotate and skew must be manually\n         * removed with a re-render to work.\n         */\n        measureViewportBox() {\n            return measureViewportBox(instance, props);\n        },\n        // Motion values ========================\n        /**\n         * Add a motion value and bind it to this visual element.\n         */\n        addValue(key, value) {\n            // Remove existing value if it exists\n            if (element.hasValue(key))\n                element.removeValue(key);\n            values.set(key, value);\n            latestValues[key] = value.get();\n            bindToMotionValue(key, value);\n        },\n        /**\n         * Remove a motion value and unbind any active subscriptions.\n         */\n        removeValue(key) {\n            var _a;\n            values.delete(key);\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n            valueSubscriptions.delete(key);\n            delete latestValues[key];\n            removeValueFromRenderState(key, renderState);\n        },\n        /**\n         * Check whether we have a motion value for this key\n         */\n        hasValue: (key) => values.has(key),\n        /**\n         * Get a motion value for this key. If called with a default\n         * value, we'll create one if none exists.\n         */\n        getValue(key, defaultValue) {\n            if (props.values && props.values[key]) {\n                return props.values[key];\n            }\n            let value = values.get(key);\n            if (value === undefined && defaultValue !== undefined) {\n                value = motionValue(defaultValue);\n                element.addValue(key, value);\n            }\n            return value;\n        },\n        /**\n         * Iterate over our motion values.\n         */\n        forEachValue: (callback) => values.forEach(callback),\n        /**\n         * If we're trying to animate to a previously unencountered value,\n         * we need to check for it in our state and as a last resort read it\n         * directly from the instance (which might have performance implications).\n         */\n        readValue: (key) => latestValues[key] !== undefined\n            ? latestValues[key]\n            : readValueFromInstance(instance, key, options),\n        /**\n         * Set the base target to later animate back to. This is currently\n         * only hydrated on creation and when we first read a value.\n         */\n        setBaseTarget(key, value) {\n            baseTarget[key] = value;\n        },\n        /**\n         * Find the base target for a value thats been removed from all animation\n         * props.\n         */\n        getBaseTarget(key) {\n            var _a;\n            const { initial } = props;\n            const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n                ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n                : undefined;\n            /**\n             * If this value still exists in the current initial variant, read that.\n             */\n            if (initial && valueFromInitial !== undefined) {\n                return valueFromInitial;\n            }\n            /**\n             * Alternatively, if this VisualElement config has defined a getBaseTarget\n             * so we can read the value from an alternative source, try that.\n             */\n            if (getBaseTarget) {\n                const target = getBaseTarget(props, key);\n                if (target !== undefined && !isMotionValue(target))\n                    return target;\n            }\n            /**\n             * If the value was initially defined on initial, but it doesn't any more,\n             * return undefined. Otherwise return the value as initially read from the DOM.\n             */\n            return initialValues[key] !== undefined &&\n                valueFromInitial === undefined\n                ? undefined\n                : baseTarget[key];\n        },\n        // Lifecyles ========================\n        ...lifecycles,\n        /**\n         * Build the renderer state based on the latest visual state.\n         */\n        build() {\n            triggerBuild();\n            return renderState;\n        },\n        /**\n         * Schedule a render on the next animation frame.\n         */\n        scheduleRender() {\n            sync.render(render, false, true);\n        },\n        /**\n         * Synchronously fire render. It's prefered that we batch renders but\n         * in many circumstances, like layout measurement, we need to run this\n         * synchronously. However in those instances other measures should be taken\n         * to batch reads/writes.\n         */\n        syncRender: render,\n        /**\n         * Update the provided props. Ensure any newly-added motion values are\n         * added to our map, old ones removed, and listeners updated.\n         */\n        setProps(newProps) {\n            if (newProps.transformTemplate || props.transformTemplate) {\n                element.scheduleRender();\n            }\n            props = newProps;\n            lifecycles.updatePropListeners(newProps);\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n        },\n        getProps: () => props,\n        // Variants ==============================\n        /**\n         * Returns the variant definition with a given name.\n         */\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; },\n        /**\n         * Returns the defined default transition on this component.\n         */\n        getDefaultTransition: () => props.transition,\n        getTransformPagePoint: () => {\n            return props.transformPagePoint;\n        },\n        /**\n         * Used by child variant nodes to get the closest ancestor variant props.\n         */\n        getVariantContext(startAtParent = false) {\n            if (startAtParent)\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n            if (!isControllingVariants$1) {\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                if (props.initial !== undefined) {\n                    context.initial = props.initial;\n                }\n                return context;\n            }\n            const context = {};\n            for (let i = 0; i < numVariantProps; i++) {\n                const name = variantProps[i];\n                const prop = props[name];\n                if (isVariantLabel(prop) || prop === false) {\n                    context[name] = prop;\n                }\n            }\n            return context;\n        },\n    };\n    return element;\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}