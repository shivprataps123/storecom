{"ast":null,"code":"import{useContext}from\"react\";import{Navigate}from'react-router-dom';import{AuthContext}from\"../Context/AuthContext/AuthContextProvider\";// 1. This particular component shall be a wrapper which based on authentication status either redirects user back to login page or renders the same page;\n// 2. if user is not logged in; user should be redirected to the login page;\nimport{jsx as _jsx}from\"react/jsx-runtime\";var PrivateRoute=function PrivateRoute(_ref){var children=_ref.children;var _useContext=useContext(AuthContext),state=_useContext.state;if(!state.isAuth){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\"});}return children;};export default PrivateRoute;","map":{"version":3,"names":["useContext","Navigate","AuthContext","PrivateRoute","children","state","isAuth"],"sources":["D:/Mystore/MyStore/storecom/src/Components/PrivateRoute.jsx"],"sourcesContent":["import {useContext} from \"react\";\nimport {Navigate} from 'react-router-dom';\nimport { AuthContext } from \"../Context/AuthContext/AuthContextProvider\";\n\n// 1. This particular component shall be a wrapper which based on authentication status either redirects user back to login page or renders the same page;\n// 2. if user is not logged in; user should be redirected to the login page;\n\nconst PrivateRoute = ({children}) => {\n  const {state}=useContext(AuthContext);\n  if(!state.isAuth){\n    return <Navigate to='/login'/>\n  }\n  return children\n};\n\nexport default PrivateRoute;\n"],"mappings":"AAAA,OAAQA,UAAR,KAAyB,OAAzB,CACA,OAAQC,QAAR,KAAuB,kBAAvB,CACA,OAASC,WAAT,KAA4B,4CAA5B,CAEA;AACA;2CAEA,GAAMC,aAAY,CAAG,QAAfA,aAAe,MAAgB,IAAdC,SAAc,MAAdA,QAAc,CACnC,gBAAcJ,UAAU,CAACE,WAAD,CAAxB,CAAOG,KAAP,aAAOA,KAAP,CACA,GAAG,CAACA,KAAK,CAACC,MAAV,CAAiB,CACf,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAC,QAAb,EAAP,CACD,CACD,MAAOF,SAAP,CACD,CAND,CAQA,cAAeD,aAAf"},"metadata":{},"sourceType":"module"}