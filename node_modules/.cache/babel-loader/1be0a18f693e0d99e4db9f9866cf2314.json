{"ast":null,"code":"var _jsxFileName = \"D:\\\\rct_101_eval_4\\\\src\\\\Context\\\\AuthContext\\\\AuthContextProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport reducer from './reducer'; // 1. create auth context and auth context provider for the entire application to have auth related data;\n// 2. maintain loading,error, auth status and token in the state; it goes without saying; you are expected to use useReducer as state management tool; (hint : different actions that you are expected to have can be login - loading, success, failure ..)\n// 3. send both state and dispatch values so that entire application has access to the state and dispatch function;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext();\nconst initState = {\n  isLoading: false,\n  isAuth: false,\n  token: null,\n  isError: false\n};\n\nconst AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initState);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AuthContextProvider, \"1V98u/UDHy2uklucCACGLcisRgc=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useReducer","reducer","AuthContext","createContext","initState","isLoading","isAuth","token","isError","AuthContextProvider","children","state","dispatch"],"sources":["D:/rct_101_eval_4/src/Context/AuthContext/AuthContextProvider.jsx"],"sourcesContent":["import React,{useReducer} from \"react\";\nimport reducer from './reducer'\n\n// 1. create auth context and auth context provider for the entire application to have auth related data;\n\n// 2. maintain loading,error, auth status and token in the state; it goes without saying; you are expected to use useReducer as state management tool; (hint : different actions that you are expected to have can be login - loading, success, failure ..)\n\n// 3. send both state and dispatch values so that entire application has access to the state and dispatch function;\nexport const AuthContext=React.createContext();\nconst initState={\n  isLoading:false,\n  isAuth:false,\n  token:null,\n  isError:false,\n}\nconst AuthContextProvider = ({children}) => {\n  const[state,dispatch]=useReducer(reducer,initState);\n  return (\n  <AuthContext.Provider value={{state,dispatch}}>\n    {children}\n  </AuthContext.Provider>\n  ) \n};\n\nexport default AuthContextProvider;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AAEA;AAEA;;;AACA,OAAO,MAAMC,WAAW,gBAACH,KAAK,CAACI,aAAN,EAAlB;AACP,MAAMC,SAAS,GAAC;EACdC,SAAS,EAAC,KADI;EAEdC,MAAM,EAAC,KAFO;EAGdC,KAAK,EAAC,IAHQ;EAIdC,OAAO,EAAC;AAJM,CAAhB;;AAMA,MAAMC,mBAAmB,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAC1C,MAAK,CAACC,KAAD,EAAOC,QAAP,IAAiBZ,UAAU,CAACC,OAAD,EAASG,SAAT,CAAhC;EACA,oBACA,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAACO,KAAD;MAAOC;IAAP,CAA7B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADA;AAKD,CAPD;;GAAMD,mB;;KAAAA,mB;AASN,eAAeA,mBAAf"},"metadata":{},"sourceType":"module"}